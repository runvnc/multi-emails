// Generated by CoffeeScript 1.8.0
(function() {
  var Pouch, async, fs, mkdirp, nodemailer, pathHelpers, remove, sendmailTransport, uuid;

  fs = require('fs');

  pathHelpers = require('path');

  async = require('async');

  mkdirp = require('mkdirp');

  remove = require('remove');

  nodemailer = require('nodemailer');

  sendmailTransport = require('nodemailer-sendmail-transport');

  uuid = require('node-uuid');

  Pouch = require('pouchdb');

  module.exports.initialize = function(schema, callback) {
    this.schema = schema;
    schema.adapter = new module.exports.PouchDB(schema);
    return process.nextTick(callback);
  };

  module.exports.PouchDB = (function() {
    function PouchDB(schema) {
      var dbName;
      this.schema = schema;
      this._models = {};
      this.views = {};
      if (this.schema.settings.db != null) {
        this.db = this.schema.settings.db;
      } else {
        if (this.schema.settings.dbName != null) {
          dbName = this.schema.settings.dbName;
        } else {
          dbName = process.env.POUCHDB_NAME || 'cozy';
        }
        this.db = new Pouch(dbName);
      }
    }

    PouchDB.prototype.define = function(descr) {
      descr.properties.docType = {
        type: String,
        "default": descr.model.modelName
      };
      this._models[descr.model.modelName] = descr;
      descr.model.search = (function(_this) {
        return function(query, callback) {
          return _this.search(descr.model.modelName, query, callback);
        };
      })(this);
      descr.model.defineRequest = (function(_this) {
        return function(name, map, callback) {
          return _this.defineRequest(descr.model.modelName, name, map, callback);
        };
      })(this);
      descr.model.request = (function(_this) {
        return function(name, params, callback) {
          return _this.request(descr.model.modelName, name, params, callback);
        };
      })(this);
      descr.model.rawRequest = (function(_this) {
        return function(name, params, callback) {
          return _this.rawRequest(descr.model.modelName, name, params, callback);
        };
      })(this);
      descr.model.removeRequest = (function(_this) {
        return function(name, callback) {
          return _this.removeRequest(descr.model.modelName, name, callback);
        };
      })(this);
      descr.model.requestDestroy = (function(_this) {
        return function(name, params, callback) {
          return _this.requestDestroy(descr.model.modelName, name, params, callback);
        };
      })(this);
      descr.model.all = (function(_this) {
        return function(params, callback) {
          return _this.all(descr.model.modelName, params, callback);
        };
      })(this);
      descr.model.destroyAll = (function(_this) {
        return function(params, callback) {
          return _this.destroyAll(descr.model.modelName, params, callback);
        };
      })(this);
      descr.model.applyRequest = (function(_this) {
        return function(params, callback) {
          return _this.applyRequest(descr.model.modelName, params, callback);
        };
      })(this);
      descr.model._forDB = (function(_this) {
        return function(data) {
          return _this._forDB(descr.model.modelName, data);
        };
      })(this);
      descr.model.prototype.index = function(fields, callback) {
        return this._adapter().index(this, fields, callback);
      };
      descr.model.prototype.attachFile = function(path, data, callback) {
        return this._adapter().attachFile(this, path, data, callback);
      };
      descr.model.prototype.getFile = function(path, callback) {
        return this._adapter().getFile(this, path, callback);
      };
      descr.model.prototype.saveFile = function(path, filePath, callback) {
        return this._adapter().saveFile(this, path, filePath, callback);
      };
      descr.model.prototype.removeFile = function(path, callback) {
        return this._adapter().removeFile(this, path, callback);
      };
      descr.model.prototype.attachBinary = function(path, data, callback) {
        return this._adapter().attachBinary(this, path, data, callback);
      };
      descr.model.prototype.getBinary = function(path, callback) {
        return this._adapter().getBinary(this, path, callback);
      };
      descr.model.prototype.saveBinary = function(path, filePath, callback) {
        return this._adapter().saveBinary(this, path, filePath, callback);
      };
      return descr.model.prototype.removeBinary = function(path, callback) {
        return this._adapter().removeBinary(this, path, callback);
      };
    };

    PouchDB.prototype.exists = function(model, id, callback) {
      return this.db.get(id, (function(_this) {
        return function(err, doc) {
          if (err && !err.status === 404) {
            return callback(err);
          } else if ((err != null ? err.status : void 0) === 404) {
            return callback(null, false);
          } else {
            return callback(null, true);
          }
        };
      })(this));
    };

    PouchDB.prototype.find = function(model, id, callback) {
      return this.db.get(id, (function(_this) {
        return function(err, doc) {
          if (err) {
            return callback(err);
          } else if (doc == null) {
            return callback(null, null);
          } else if (doc.docType.toLowerCase() !== model.toLowerCase()) {
            return callback(null, null);
          } else {
            return callback(null, new _this._models[model].model(doc));
          }
        };
      })(this));
    };

    PouchDB.prototype.create = function(model, data, callback) {
      var func;
      data.docType = model;
      func = 'post';
      if ((data.id != null) || (data._id != null)) {
        if (data.id == null) {
          data.id = data._id;
        }
        if (data._id == null) {
          data._id = data.id;
        }
        func = 'put';
      } else {
        data._id = uuid.v4().split('-').join('');
      }
      return this.db[func](data, (function(_this) {
        return function(err, response) {
          if (err) {
            return callback(err);
          } else if (!response.ok) {
            return callback(new Error('An error occured while creating document.'));
          } else {
            return callback(null, response.id);
          }
        };
      })(this));
    };

    PouchDB.prototype.save = function(model, data, callback) {
      data.docType = model;
      return this.db.get(data.id, (function(_this) {
        return function(err, doc) {
          if (err) {
            return callback(err);
          } else if (doc == null) {
            return callback(new Error('document does not exist'));
          } else if (doc.docType.toLowerCase() !== model.toLowerCase()) {
            return callback(new Error('document does not exist'));
          } else {
            data._id = data.id;
            data._rev = doc._rev;
            return _this.db.put(data, function(err, response) {
              if (err) {
                callback(err);
              }
              if (!response.ok) {
                return callback(new Error('An error occured while saving document.'));
              } else {
                return callback();
              }
            });
          }
        };
      })(this));
    };

    PouchDB.prototype.updateAttributes = function(model, id, data, callback) {
      data.id = id;
      return this.save(model, data, callback);
    };

    PouchDB.prototype.updateOrCreate = function(model, data, callback) {
      data.docType = model;
      return this.save(model, data, callback);
    };

    PouchDB.prototype.destroy = function(model, id, callback) {
      return this.db.get(id, (function(_this) {
        return function(err, doc) {
          if (err) {
            return callback(err);
          } else {
            return _this.db.remove(doc, callback);
          }
        };
      })(this));
    };

    PouchDB.prototype.index = function(model, fields, callback) {
      return callback();
    };

    PouchDB.prototype.search = function(model, query, callback) {
      return callback(null, []);
    };

    PouchDB.prototype.attachFile = function(model, path, data, callback) {
      var folder;
      if (typeof data === 'function') {
        callback = data;
      }
      folder = pathHelpers.join("attachments", model.id);
      return mkdirp(folder, function(err) {
        var filename, filepath, source, target;
        if (err) {
          return callback(err);
        } else {
          filename = pathHelpers.basename(path);
          filepath = pathHelpers.join(folder, filename);
          source = fs.createReadStream(path);
          target = fs.createWriteStream(filepath);
          source.on('error', callback);
          source.on('end', callback);
          return source.pipe(target);
        }
      });
    };

    PouchDB.prototype.getFile = function(model, path, callback) {
      var filename, filepath, folder, source;
      folder = pathHelpers.join("attachments", model.id);
      filename = pathHelpers.basename(path);
      filepath = pathHelpers.join(folder, filename);
      source = fs.createReadStream(filepath);
      source.on('error', callback);
      source.on('end', callback);
      return source;
    };

    PouchDB.prototype.saveFile = function(model, path, filePath, callback) {
      var source, target;
      target = fs.createWriteStream(filePath);
      source = getFile(model, path, callback);
      source.on('error', callback);
      target.on('finish', callback);
      return source.pipe(target);
    };

    PouchDB.prototype.removeFile = function(model, filename, callback) {
      var filepath, folder;
      folder = pathHelpers.join("attachments", model.id);
      filepath = pathHelpers.join(folder, filename);
      return fs.unlink(filepath, callback);
    };

    PouchDB.prototype.attachBinary = function(model, path, data, callback) {
      var folder, writeStream;
      if (typeof data === 'function') {
        callback = data;
        data = null;
      }
      writeStream = function(filepath, source, callback) {
        var target;
        target = fs.createWriteStream(filepath);
        source.on('error', callback);
        source.on('end', callback);
        return source.pipe(target);
      };
      folder = pathHelpers.join("attachments", model.id);
      return mkdirp(folder, function(err) {
        var buffer, filename, filepath, source;
        if (err) {
          return callback(err);
        } else if (typeof path === 'string') {
          filename = pathHelpers.basename(path);
          filepath = pathHelpers.join(folder, filename);
          source = fs.createReadStream(path);
          return writeStream(filepath, source, callback);
        } else if (path instanceof Buffer) {
          filename = (data != null ? data.name : void 0) || 'file';
          filepath = pathHelpers.join(folder, filename);
          buffer = path;
          return fs.writeFile(filepath, buffer, callback);
        } else {
          filename = (data != null ? data.name : void 0) || 'file';
          filepath = pathHelpers.join(folder, filename);
          source = path;
          return writeStream(filepath, source, callback);
        }
      });
    };

    PouchDB.prototype.getBinary = function(model, path, callback) {
      var filename, filepath, folder, source;
      folder = pathHelpers.join("attachments", model.id);
      filename = pathHelpers.basename(path);
      filepath = pathHelpers.join(folder, filename);
      source = fs.createReadStream(filepath);
      source.on('error', callback);
      source.on('end', callback);
      return source;
    };

    PouchDB.prototype.saveBinary = function(model, path, filePath, callback) {
      var source, target;
      target = fs.createWriteStream(filePath);
      source = getFile(model, path, callback);
      source.on('error', callback);
      target.on('finish', callback);
      return source.pipe(target);
    };

    PouchDB.prototype.removeBinary = function(model, path, callback) {
      var filepath, folder;
      folder = pathHelpers.join("attachments", model.id);
      filepath = pathHelpers.join(folder, filename);
      return fs.unlink(filepath, callback);
    };

    PouchDB.prototype.checkError = function(error, response, body, code, callback) {
      var msg, msgStatus;
      if (error) {
        return callback(error);
      } else if (response.statusCode !== code) {
        msgStatus = "expected: " + code + ", got: " + response.statusCode;
        msg = "" + msgStatus + " -- " + body.error;
        return callback(new Error(msg));
      } else {
        return callback(null);
      }
    };

    PouchDB.prototype.defineRequest = function(model, name, request, callback) {
      var map, qs, reduce, stringquery, view, viewName;
      if (typeof request === "function") {
        map = request;
      } else {
        map = request.map;
        reduce = request.reduce;
      }
      qs = map.toString();
      qs = qs.substring('function(doc) {'.length);
      qs = qs.substring(0, qs.length - 1);
      stringquery = "if (doc.docType.toLowerCase() === " + ("\"" + (model.toLowerCase()) + "\") " + (qs.toString()) + "};");
      stringquery = stringquery.replace('\n', '');
      map = new Function("doc", stringquery);
      view = {
        map: map.toString()
      };
      if (reduce != null) {
        view.reduce = reduce.toString();
      }
      viewName = "_design/" + (model.toLowerCase());
      return this.db.get(viewName, (function(_this) {
        return function(err, designDoc) {
          if (designDoc == null) {
            designDoc = {
              _id: viewName,
              views: {}
            };
          }
          if (designDoc.views == null) {
            designDoc.views = {};
          }
          designDoc.views[name] = view;
          return _this.db.put(designDoc, function(err, designDoc) {
            return callback();
          });
        };
      })(this));
    };

    PouchDB.prototype.request = function(model, name, params, callback) {
      var viewName;
      if (typeof params === "function") {
        callback = params;
        params = {};
      }
      viewName = "" + (model.toLowerCase()) + "/" + name;
      return this.db.query(viewName, params, (function(_this) {
        return function(err, body) {
          var doc, results, _i, _len, _ref;
          if (err) {
            return callback(err);
          } else {
            results = [];
            _ref = body.rows;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              doc = _ref[_i];
              doc.value.id = doc.value._id;
              results.push(new _this._models[model].model(doc.value));
            }
            return callback(null, results);
          }
        };
      })(this));
    };

    PouchDB.prototype.rawRequest = function(model, name, params, callback) {
      var viewName;
      if (typeof params === "function") {
        callback = params;
        params = {};
      }
      viewName = "" + (model.toLowerCase()) + "/" + name;
      return this.db.query(viewName, params, (function(_this) {
        return function(err, body) {
          if (err) {
            return callback(err);
          } else {
            return callback(null, body.rows || body);
          }
        };
      })(this));
    };

    PouchDB.prototype.removeRequest = function(model, name, callback) {
      name = '_design/' + model.toLowerCase() + '/' + name;
      return this.db.get(name, function(err, doc) {
        if (err) {
          return callback(err);
        } else {
          return this.db.remove(doc, callback);
        }
      });
    };

    PouchDB.prototype.requestDestroy = function(model, name, params, callback) {
      if (typeof params === "function") {
        callback = params;
        params = {};
      }
      return this.request(model, name, params, function(err, docs) {
        if (err) {
          return callback(err);
        } else {
          return async.eachSeries(docs, function(doc, cb) {
            return doc.destroy(cb);
          }, function(err) {
            return callback(err);
          });
        }
      });
    };

    PouchDB.prototype.all = function(model, params, callback) {
      var view;
      view = "all";
      if ((params != null ? params.view : void 0) != null) {
        view = params.view;
        delete params.view;
      }
      return this.request(model, view, params, callback);
    };

    PouchDB.prototype.destroyAll = function(model, params, callback) {
      var view;
      view = "all";
      if ((params != null ? params.view : void 0) != null) {
        view = params.view;
        delete params.view;
      }
      return this.requestDestroy(model, view, params, callback);
    };

    PouchDB.prototype._forDB = function(model, data) {
      var res;
      res = {};
      Object.keys(data).forEach((function(_this) {
        return function(propName) {
          if (_this.whatTypeName(model, propName) === 'JSON') {
            return res[propName] = JSON.stringify(data[propName]);
          } else {
            return res[propName] = data[propName];
          }
        };
      })(this));
      return res;
    };

    PouchDB.prototype.whatTypeName = function(model, propName) {
      var ds;
      ds = this.schema.definitions[model];
      return ds.properties[propName] && ds.properties[propName].type.name;
    };

    return PouchDB;

  })();

  exports.sendMail = function(data, callback) {
    var transporter;
    transporter = nodemailer.createTransport(sendmailTransport(options));
    return transporter.sendMail(data, options);
  };

  exports.sendMailToUser = function(data, callback) {
    var config;
    try {
      config = require('./config');
      config.to = config.email;
    } catch (_error) {
      console.log("no config found, can't retrieve user address");
    }
    return this.sendMail(data, options);
  };

  exports.sendMailFromUser = function(data, callback) {
    var config;
    try {
      config = require('./config');
      config.from = config.email;
    } catch (_error) {
      console.log("no config found, can't retrieve user address");
    }
    return this.sendMail(data, options);
  };

  exports.commonRequests = {
    checkError: function(err) {
      if (err) {
        return console.log("An error occured while creating request");
      }
    },
    all: function() {
      return emit(doc._id, doc);
    },
    allType: function() {
      return emit(doc.docType, doc);
    },
    allSlug: function() {
      return emit(doc.slug, doc);
    },
    allDate: function() {
      return emit(doc.date, doc);
    }
  };

}).call(this);
